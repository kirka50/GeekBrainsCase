{
  "text": " Привет, меня зовут Владислав Ефимов, я работаю в команде ВК рекламы. Прежде чем приступить к изучению языка, я кратко расскажу о преимуществах этого языка программирования, какие задачи можно с помощью него решать и в каких IT-профессиях он используется. Начнем с отличительных преимуществ языка программирования, какие задачи можно с помощью него решать и в каких IT-профессиях он используется. Начнем с отличительных преимуществ языка. Во-первых, это простой для понимания использование язык. У языка Python, пожалуй, один из самых простых и понятных синтаксис относительно других языков. Во-вторых, язык интерпретируемый. Это значит, что вы можете написать код и сразу его запустить, не прибегая к шагу компиляции. Он позволяет исполнять код строка за строкой, что бывает очень удобно и полезно при разработке и исследованиях. В-третьих, это популярный язык, а значит для него существует множество готовых библиотек, которые решают реальные задачи, а не придется придумывать и писать какие-то вещи с нуля. В-четвертых, популярность языка также означает большое сообщество разработчиков и энтузиастов. Из-за этого в сети можно найти много гайдов, обсуждений, обучающих материалов и многого другого. И в-пятых, портативность. Код на Python, написанный на одной платформе, например, на Mac, спокойно запустится на другой, например, на Windows. Если говорить об областях применениях, то язык Python применяется во многих областях. Например, во-первых, это веб-разработка. Можно строить бэкэнд веб-приложения в качестве веб-разработчика. Большой набор библиотек и встроенных инструментов позволяет построить как небольшое приложение, так и большую сложность с сервис-базами данных и микросервисами. Во-вторых, машинное обучение и искусственный интеллект. В качестве ML-специалиста можно разрабатывать различные решения на этом языке. От простых статистических моделей до сложных нейронных сетей. А скомбинировав это с разработкой веб-приложения можно даже создать свой неповторимый онлайн-сервис. В-третьих, анализ данных. Аналитикам данных Python помогает в проверке гипотез, визуализации и обработке данных. Что немаловажно, все это получается делать быстро и удобно с понятным и несложным синтаксисом Python. 4. Автоматизация тестирования И конечно, как и любой код, код на Python, особенно если это уже не маленький проект, нуждается в тестировании. Поэтому профессия тестировщика Python тоже очень актуальна. И как и во всех предыдущих примерах, для тестирования существует множество готовых библиотек. Теперь перейдем к изучению языка. На этом уроке вы узнаете об интерпретаторе Python, про его интерактивный режим и запуск отдельных файлов с кодом, о базовых понятиях языка, таких как литерал переменная, об IDE PyCharm и как начать с ней работать, о получении данных со стандартного ввода. Теперь поговорим немного о базовых вещах, а именно об интерпретаторе Python. Что такое интерпретатор? Это программа, выполняющая обосрочный анализ, обработку и выполнение исходного кода Python. Если вы уже проследовали инструкцию, которая была приложена к этому уроку, вы уже должны были по инструкции установить интерпретатор Python и IDE по Charm. Давайте начнем с интерпретатора. Для того, чтобы запустить интерпретатор, нам нужно открыть терминал и написать там ключевое слово Python. Если вы все правильно сделали, у вас откроется интерактивная среда Python. В ней вы можете, собственно, выполнять код строка за строкой. Например, можете вывести какую-нибудь строку. Это делается с помощью функции print. Давайте выведем стандартный для начала курсов всех по языкам программирования Hello World. Видим, что после нашего ввода на выводе появился Hello World. На самом деле можно в таком режиме выполнять все конструкции языка, даже если они в одну строку не помещаются. Об этом мы поговорим чуть позже. А теперь давайте поговорим о том, как запустить исходный код Python с помощью интерпретатора, но уже не в интерактивном режиме. Для этого давайте откроем любой текстовый редактор, который вам удобен. В моем случае это Sublime Text. И напишем то же самое. print hello world. Сохраним это. Отлично, мы сохранили это файл hello.py. Давайте теперь вернемся в терминал. Я это сохранил в папку example. Посмотрим. Вот он наш hello.py. Чтобы запустить исходный код через файл, нужно написать также ключевое слово python и указать файл вместе с расширением hello.py. Видим, что у нас на стандартный вывод вывелось наше Hello World. То есть это абсолютно аналогично тому, что мы делали в интерактивной среде. Мы сейчас с вами рассмотрели варианты разработки в интерактивной среде и в текстовом файле, но для промышленной разработки такие варианты не подходят. Ну, на самом деле, конечно, можно в текстовом редакторе все делать, но существует такое понятие, как интерактивная среда разработки, IDE. Чем они полезны? Как минимум, это текстовый редактор тоже. Во-вторых, они предлагают разные инструменты для запуска и отладки вашего кода, а также помогают вам с синтаксисом языка, то есть с переносами, где-то вы описались, что-то забыли, опечатались, вам эта аттрактивная среда подсветит и предложит иногда даже варианты исправления. Вы уже по инструкции должны были установить IDE PageArm. Давайте ее откроем, запустим. Для вас будет приветствовать такое окно, в котором можно создать либо новый проект. Давайте попробуем. Здесь мы выбираем, во-первых, куда мы его сохраним. Тут некоторое значение по умолчанию нам подсказывает сама IDE, но обычно мы хотим в какое-то другое место сохранить. Тут можно это выбрать. И также нужно выбрать еще интерпретатор. Это, скорее всего, у вас будет один из вариантов, тот, что вы установили, но если у вас каким-то... почему-то есть несколько, вот вы можете выбрать подходящий. Но нас сейчас будет больше интересовать открытие уже существующего проекта. Это кнопка Open. Выбираете папку и нажимаете Open. У нас открывается ваш проект. И вот, собственно, тут в левой части информации о проекте, мы можем увидеть структуру нашего проекта. Наша папка Exam и hello.py. И видим вот то же самое, что мы набирали в текстовом редакторе. Давайте попробуем запустить эту программу. Выбираем run, здесь еще раз run и здесь hello выбираем. Видим, что получили тот же вывод, hello world. Первая строка, она на самом деле аналогична тому, что мы писали в интерпретаторе без интерактивного режима, то есть python hello.py, только еще с дополнительными опциями и абсолютными путями. И в конце у нас есть сообщение, которое говорит нам о том, что мы завершили с кодом 0, ну то есть без ошибок это обычно значит. Давайте теперь поговорим о базовых вещах в языке Python. Начнем с литералы. Литерал это то же самое, что константа. Например, 1, 2, 3 число это константа. Строка ABC это тоже константа. Следующая сущность — это переменные. Что такое переменные? Это сущность в коде, используемая для хранения данных, например, промежуточного результата. В языке Python переменные задаются следующим образом. Задается сначала имя переменные, пусть будет var, потом знак равенства равно и дальше выражение некоторое. Давайте мы напишем здесь 123. То есть что значит этот код? Значит, что в переменную с именем var записать значение литерала 123. Константы, да? Также можно создать другую переменную var2 и в нее записать строку abc. Замечательно. Язык Python является динамически типизированным. Что это значит? Это значит, что нам не нужно писать имя типа перед объявлением перемены. Это дополнительно значит, что мы в любую переменную можем положить любое значение, то есть любой тип. Например, мы можем в переменную var3 положить сначала 123, что является числовым типом данных, а потом туда же положить строку abc Это будет валидным кодом. Интерпретатор на это не будет ругаться. Все хорошо. Что еще хотелось сразу подметить. В языке часто будете встречать конструкции с такой вот решеткой. Это называется комментарий. Видите, нам даже IDE специальным образом выделила этот кусок кода. Он стал серым. Для чего это нужно? Это, во-первых, называется комментариям, во-вторых, это нужно, чтобы какие-то куски кода или каких-то комментариев ваших, возможно словесных пояснений, интерпретатор не обрабатывал как код, а просто пропускал. Также можно комментировать сразу несколько строк и раскомментировать обратно. Например, на macOS это комбинация command slash. Комментирует либо раскомментирует обратно. Давайте теперь поговорим о том, как вводить данные пользователя с клавиатуры. Для этого есть функция input. Давайте рассмотрим следующий фрагмент кода. Мы в переменную var3 записываем значение того, что нам вернет функция input, а она нам вернет то, что пользователь ведет с командной строки. При этом в командной строке пользователя будет ожидать вот это сообщение, Enter your age, и двоеточие. Давайте запустим этот фрагмент кода и посмотрим, что у нас получится. Как видим, программа вывела приветственное сообщение. Enter your age. Давайте передадим ей туда 1, 2, 3. Нажмем Enter. И видим, что программа завершилась. Ну, потому что мы с этими данными ничего не делали, записали просто в переменную и дальше вышли из программы давайте чуть проверим, что на самом деле то, что мы ввели, оно и выведется добавив вот такой кусок кода, то есть мы выведем print, hello, давайте выведем еще какую-нибудь переменную, наш var дополнительно и переменную myvr3. По идее у нас должно вывесться hello, потом 123 и то что мы введем с командной строки. Давайте пробовать. Давайте в этот раз что-нибудь введем не 1.0.3, а 4.5.6. Как мы видим, как и ожидалось, ввелось hello, потом 1.2.3, а потом то, что мы ввели из командной строки, то есть 4.5.6. Ну и дальше программа завершилась. И в заключение давайте еще расскажу про Python-консоль в IDE.pharm. То есть, то, что мы запускали в терминале, можно запустить и в самой IDE. Здесь по правой части есть вот такая иконка Python консоль. Мы просто ее нажимаем, запускается некий процесс и на самом деле запускается Python интерпретатор в интерактивном режиме. Здесь мы также то же самое все можем делать, что делали при обычном запуске интерпретатора. Ну, например, давайте опять hello world, напишем print hello world, enter. Вот, программа вывела hello world. То же самое, на самом деле, давайте с input еще раз попробуем. Давайте в какую-нибудь переменную var, запишем значение input, отметил, что можно приветственное сообщение вообще не писать, а ставить просто круглые скобочки, тогда просто от вас программа будет ожидать сразу ввод без какого-то приветствия. Ну давайте здесь abc123, передадим, enter, 3. Передадим. Enter. Отлично. И посмотрим, что у нас переменный var. То есть, чтобы посмотреть, что в переменной var, можно написать ее имя и нажать Enter. Вам интерпретатор сразу выведет ее значение. То есть, не обязательно писать print в интерактивном режиме в этом случае. То есть, будет примерно то же самое. На этом уроке мы познакомились с интерпретатором Python, узнали как работать с ним в интерактивном режиме, как запускать код из файла с его помощью, познакомились с IDE по HR, узнали как базово разрабатывать код в ней, написали свою первую программу Hello World, а также разобрались с такими понятиями как литерал, переменные, научились выводить данные в консоль, а также считывать пользовательские данные со стандартного ввода.",
  "chunks": [
    {
      "timestamp": [
        0.0,
        14.88
      ],
      "text": " Привет, меня зовут Владислав Ефимов, я работаю в команде"
    },
    {
      "timestamp": [
        14.88,
        16.12
      ],
      "text": " ВК рекламы."
    },
    {
      "timestamp": [
        16.12,
        18.56
      ],
      "text": " Прежде чем приступить к изучению языка, я кратко"
    },
    {
      "timestamp": [
        18.56,
        21.44
      ],
      "text": " расскажу о преимуществах этого языка программирования,"
    },
    {
      "timestamp": [
        21.44,
        24.88
      ],
      "text": " какие задачи можно с помощью него решать и в каких IT-профессиях"
    },
    {
      "timestamp": [
        24.88,
        26.04
      ],
      "text": " он используется. Начнем с отличительных преимуществ языка программирования, какие задачи можно с помощью него решать и в каких IT-профессиях он используется."
    },
    {
      "timestamp": [
        26.04,
        28.44
      ],
      "text": " Начнем с отличительных преимуществ языка."
    },
    {
      "timestamp": [
        28.44,
        30.96
      ],
      "text": " Во-первых, это простой для понимания использование"
    },
    {
      "timestamp": [
        30.96,
        31.96
      ],
      "text": " язык."
    },
    {
      "timestamp": [
        31.96,
        34.72
      ],
      "text": " У языка Python, пожалуй, один из самых простых и понятных"
    },
    {
      "timestamp": [
        34.72,
        37.04
      ],
      "text": " синтаксис относительно других языков."
    },
    {
      "timestamp": [
        37.04,
        39.0
      ],
      "text": " Во-вторых, язык интерпретируемый."
    },
    {
      "timestamp": [
        39.0,
        41.54
      ],
      "text": " Это значит, что вы можете написать код и сразу его"
    },
    {
      "timestamp": [
        41.54,
        44.44
      ],
      "text": " запустить, не прибегая к шагу компиляции."
    },
    {
      "timestamp": [
        44.44,
        47.0
      ],
      "text": " Он позволяет исполнять код строка за строкой, что"
    },
    {
      "timestamp": [
        47.0,
        50.0
      ],
      "text": " бывает очень удобно и полезно при разработке и исследованиях."
    },
    {
      "timestamp": [
        50.0,
        52.96
      ],
      "text": " В-третьих, это популярный язык, а значит для него"
    },
    {
      "timestamp": [
        52.96,
        55.92
      ],
      "text": " существует множество готовых библиотек, которые решают"
    },
    {
      "timestamp": [
        55.92,
        59.72
      ],
      "text": " реальные задачи, а не придется придумывать и писать какие-то"
    },
    {
      "timestamp": [
        59.72,
        60.72
      ],
      "text": " вещи с нуля."
    },
    {
      "timestamp": [
        60.72,
        64.32
      ],
      "text": " В-четвертых, популярность языка также означает большое"
    },
    {
      "timestamp": [
        64.32,
        66.6
      ],
      "text": " сообщество разработчиков и энтузиастов."
    },
    {
      "timestamp": [
        66.6,
        70.04
      ],
      "text": " Из-за этого в сети можно найти много гайдов, обсуждений,"
    },
    {
      "timestamp": [
        70.04,
        72.04
      ],
      "text": " обучающих материалов и многого другого."
    },
    {
      "timestamp": [
        72.04,
        73.96
      ],
      "text": " И в-пятых, портативность."
    },
    {
      "timestamp": [
        73.96,
        76.72
      ],
      "text": " Код на Python, написанный на одной платформе, например,"
    },
    {
      "timestamp": [
        76.72,
        79.6
      ],
      "text": " на Mac, спокойно запустится на другой, например, на"
    },
    {
      "timestamp": [
        79.6,
        80.6
      ],
      "text": " Windows."
    },
    {
      "timestamp": [
        80.6,
        83.76
      ],
      "text": " Если говорить об областях применениях, то язык Python"
    },
    {
      "timestamp": [
        83.76,
        85.64
      ],
      "text": " применяется во многих областях."
    },
    {
      "timestamp": [
        85.64,
        88.24
      ],
      "text": " Например, во-первых, это веб-разработка."
    },
    {
      "timestamp": [
        88.24,
        91.76
      ],
      "text": " Можно строить бэкэнд веб-приложения в качестве веб-разработчика."
    },
    {
      "timestamp": [
        91.76,
        94.14
      ],
      "text": " Большой набор библиотек и встроенных инструментов"
    },
    {
      "timestamp": [
        94.14,
        96.76
      ],
      "text": " позволяет построить как небольшое приложение,"
    },
    {
      "timestamp": [
        96.76,
        99.44
      ],
      "text": " так и большую сложность с сервис-базами данных"
    },
    {
      "timestamp": [
        99.44,
        100.68
      ],
      "text": " и микросервисами."
    },
    {
      "timestamp": [
        100.68,
        103.56
      ],
      "text": " Во-вторых, машинное обучение и искусственный интеллект."
    },
    {
      "timestamp": [
        103.56,
        106.28
      ],
      "text": " В качестве ML-специалиста можно разрабатывать различные"
    },
    {
      "timestamp": [
        106.28,
        108.12
      ],
      "text": " решения на этом языке."
    },
    {
      "timestamp": [
        108.12,
        110.92
      ],
      "text": " От простых статистических моделей до сложных нейронных"
    },
    {
      "timestamp": [
        110.92,
        111.92
      ],
      "text": " сетей."
    },
    {
      "timestamp": [
        111.92,
        114.6
      ],
      "text": " А скомбинировав это с разработкой веб-приложения можно даже"
    },
    {
      "timestamp": [
        114.6,
        117.8
      ],
      "text": " создать свой неповторимый онлайн-сервис."
    },
    {
      "timestamp": [
        117.8,
        119.84
      ],
      "text": " В-третьих, анализ данных."
    },
    {
      "timestamp": [
        119.84,
        123.0
      ],
      "text": " Аналитикам данных Python помогает в проверке гипотез,"
    },
    {
      "timestamp": [
        123.0,
        128.06
      ],
      "text": " визуализации и обработке данных. Что немаловажно, все это получается делать быстро"
    },
    {
      "timestamp": [
        128.06,
        131.26
      ],
      "text": " и удобно с понятным и несложным синтаксисом Python."
    },
    {
      "timestamp": [
        131.26,
        132.26
      ],
      "text": " 4."
    },
    {
      "timestamp": [
        132.26,
        135.66
      ],
      "text": " Автоматизация тестирования И конечно, как и любой код,"
    },
    {
      "timestamp": [
        135.66,
        138.62
      ],
      "text": " код на Python, особенно если это уже не маленький проект,"
    },
    {
      "timestamp": [
        138.62,
        140.18
      ],
      "text": " нуждается в тестировании."
    },
    {
      "timestamp": [
        140.18,
        143.22
      ],
      "text": " Поэтому профессия тестировщика Python тоже очень актуальна."
    },
    {
      "timestamp": [
        143.22,
        146.24
      ],
      "text": " И как и во всех предыдущих примерах, для тестирования"
    },
    {
      "timestamp": [
        146.24,
        148.8
      ],
      "text": " существует множество готовых библиотек."
    },
    {
      "timestamp": [
        148.8,
        150.96
      ],
      "text": " Теперь перейдем к изучению языка."
    },
    {
      "timestamp": [
        150.96,
        154.28
      ],
      "text": " На этом уроке вы узнаете об интерпретаторе Python,"
    },
    {
      "timestamp": [
        154.28,
        157.0
      ],
      "text": " про его интерактивный режим и запуск отдельных файлов"
    },
    {
      "timestamp": [
        157.0,
        160.4
      ],
      "text": " с кодом, о базовых понятиях языка, таких как литерал"
    },
    {
      "timestamp": [
        160.4,
        164.96
      ],
      "text": " переменная, об IDE PyCharm и как начать с ней работать,"
    },
    {
      "timestamp": [
        164.96,
        167.4
      ],
      "text": " о получении данных со стандартного ввода."
    },
    {
      "timestamp": [
        167.4,
        170.12
      ],
      "text": " Теперь поговорим немного о базовых вещах, а именно"
    },
    {
      "timestamp": [
        170.12,
        171.8
      ],
      "text": " об интерпретаторе Python."
    },
    {
      "timestamp": [
        171.8,
        173.6
      ],
      "text": " Что такое интерпретатор?"
    },
    {
      "timestamp": [
        173.6,
        176.68
      ],
      "text": " Это программа, выполняющая обосрочный анализ, обработку"
    },
    {
      "timestamp": [
        176.68,
        179.2
      ],
      "text": " и выполнение исходного кода Python."
    },
    {
      "timestamp": [
        179.2,
        182.44
      ],
      "text": " Если вы уже проследовали инструкцию, которая была"
    },
    {
      "timestamp": [
        182.44,
        185.64
      ],
      "text": " приложена к этому уроку, вы уже должны были по инструкции"
    },
    {
      "timestamp": [
        185.64,
        192.08
      ],
      "text": " установить интерпретатор Python и IDE по Charm. Давайте начнем с интерпретатора. Для того,"
    },
    {
      "timestamp": [
        192.08,
        199.12
      ],
      "text": " чтобы запустить интерпретатор, нам нужно открыть терминал и написать там ключевое слово Python."
    },
    {
      "timestamp": [
        199.12,
        205.0
      ],
      "text": " Если вы все правильно сделали, у вас откроется интерактивная среда Python."
    },
    {
      "timestamp": [
        205.0,
        211.0
      ],
      "text": " В ней вы можете, собственно, выполнять код строка за строкой."
    },
    {
      "timestamp": [
        211.0,
        216.0
      ],
      "text": " Например, можете вывести какую-нибудь строку."
    },
    {
      "timestamp": [
        216.0,
        218.0
      ],
      "text": " Это делается с помощью функции print."
    },
    {
      "timestamp": [
        218.0,
        227.08
      ],
      "text": " Давайте выведем стандартный для начала курсов всех по языкам программирования Hello World."
    },
    {
      "timestamp": [
        235.48,
        236.2
      ],
      "text": " Видим, что после нашего ввода на выводе появился Hello World. На самом деле можно в таком режиме"
    },
    {
      "timestamp": [
        238.2,
        238.24
      ],
      "text": " выполнять все"
    },
    {
      "timestamp": [
        241.96,
        242.32
      ],
      "text": " конструкции языка, даже если они в одну строку не помещаются."
    },
    {
      "timestamp": [
        252.76,
        254.92
      ],
      "text": " Об этом мы поговорим чуть позже. А теперь давайте поговорим о том, как запустить исходный код Python с помощью интерпретатора, но уже не в интерактивном режиме."
    },
    {
      "timestamp": [
        254.92,
        259.88
      ],
      "text": " Для этого давайте откроем любой текстовый редактор, который вам удобен."
    },
    {
      "timestamp": [
        259.88,
        263.16
      ],
      "text": " В моем случае это Sublime Text."
    },
    {
      "timestamp": [
        263.16,
        265.28
      ],
      "text": " И напишем то же самое."
    },
    {
      "timestamp": [
        265.28,
        276.2
      ],
      "text": " print hello world. Сохраним это. Отлично, мы сохранили это файл hello.py."
    },
    {
      "timestamp": [
        276.2,
        285.56
      ],
      "text": " Давайте теперь вернемся в терминал. Я это сохранил в папку example. Посмотрим."
    },
    {
      "timestamp": [
        286.52,
        287.92
      ],
      "text": " Вот он наш hello.py."
    },
    {
      "timestamp": [
        288.8,
        294.88
      ],
      "text": " Чтобы запустить исходный код через файл, нужно написать также ключевое слово python"
    },
    {
      "timestamp": [
        295.84,
        300.24
      ],
      "text": " и указать файл вместе с расширением hello.py."
    },
    {
      "timestamp": [
        302.12,
        305.64
      ],
      "text": " Видим, что у нас на стандартный вывод вывелось наше Hello"
    },
    {
      "timestamp": [
        305.64,
        306.64
      ],
      "text": " World."
    },
    {
      "timestamp": [
        306.64,
        309.8
      ],
      "text": " То есть это абсолютно аналогично тому, что мы делали в интерактивной"
    },
    {
      "timestamp": [
        309.8,
        310.8
      ],
      "text": " среде."
    },
    {
      "timestamp": [
        310.8,
        314.4
      ],
      "text": " Мы сейчас с вами рассмотрели варианты разработки в интерактивной"
    },
    {
      "timestamp": [
        314.4,
        319.68
      ],
      "text": " среде и в текстовом файле, но для промышленной разработки"
    },
    {
      "timestamp": [
        319.68,
        321.28
      ],
      "text": " такие варианты не подходят."
    },
    {
      "timestamp": [
        321.28,
        326.0
      ],
      "text": " Ну, на самом деле, конечно, можно в текстовом редакторе все делать, но"
    },
    {
      "timestamp": [
        326.0,
        332.84
      ],
      "text": " существует такое понятие, как интерактивная среда разработки, IDE. Чем они полезны? Как минимум,"
    },
    {
      "timestamp": [
        332.84,
        341.24
      ],
      "text": " это текстовый редактор тоже. Во-вторых, они предлагают разные инструменты для запуска и отладки"
    },
    {
      "timestamp": [
        341.24,
        346.98
      ],
      "text": " вашего кода, а также помогают вам с синтаксисом языка, то есть с переносами,"
    },
    {
      "timestamp": [
        347.5,
        349.62
      ],
      "text": " где-то вы описались, что-то забыли,"
    },
    {
      "timestamp": [
        350.44,
        354.48
      ],
      "text": " опечатались, вам эта аттрактивная среда подсветит и предложит иногда даже"
    },
    {
      "timestamp": [
        354.88,
        360.28
      ],
      "text": " варианты исправления. Вы уже по инструкции должны были установить IDE PageArm."
    },
    {
      "timestamp": [
        360.86,
        363.02
      ],
      "text": " Давайте ее откроем, запустим."
    },
    {
      "timestamp": [
        363.54,
        367.96
      ],
      "text": " Для вас будет приветствовать такое окно, в котором можно создать"
    },
    {
      "timestamp": [
        367.96,
        375.88
      ],
      "text": " либо новый проект. Давайте попробуем. Здесь мы выбираем, во-первых, куда мы его сохраним. Тут"
    },
    {
      "timestamp": [
        375.88,
        382.8
      ],
      "text": " некоторое значение по умолчанию нам подсказывает сама IDE, но обычно мы хотим в какое-то другое"
    },
    {
      "timestamp": [
        382.8,
        385.08
      ],
      "text": " место сохранить. Тут можно это выбрать."
    },
    {
      "timestamp": [
        385.08,
        391.68
      ],
      "text": " И также нужно выбрать еще интерпретатор. Это, скорее всего, у вас будет один из вариантов,"
    },
    {
      "timestamp": [
        391.68,
        398.12
      ],
      "text": " тот, что вы установили, но если у вас каким-то... почему-то есть несколько, вот вы можете выбрать"
    },
    {
      "timestamp": [
        398.12,
        405.0
      ],
      "text": " подходящий. Но нас сейчас будет больше интересовать открытие уже существующего проекта."
    },
    {
      "timestamp": [
        405.0,
        408.0
      ],
      "text": " Это кнопка Open."
    },
    {
      "timestamp": [
        410.0,
        413.0
      ],
      "text": " Выбираете папку и нажимаете Open."
    },
    {
      "timestamp": [
        413.0,
        416.0
      ],
      "text": " У нас открывается ваш проект."
    },
    {
      "timestamp": [
        416.0,
        421.0
      ],
      "text": " И вот, собственно, тут в левой части информации о проекте,"
    },
    {
      "timestamp": [
        421.0,
        424.0
      ],
      "text": " мы можем увидеть структуру нашего проекта."
    },
    {
      "timestamp": [
        424.0,
        427.88
      ],
      "text": " Наша папка Exam и hello.py. И видим вот то же самое,"
    },
    {
      "timestamp": [
        427.88,
        434.44
      ],
      "text": " что мы набирали в текстовом редакторе. Давайте попробуем запустить эту программу. Выбираем run,"
    },
    {
      "timestamp": [
        434.44,
        450.4
      ],
      "text": " здесь еще раз run и здесь hello выбираем. Видим, что получили тот же вывод, hello world. Первая строка, она на самом деле аналогична тому, что мы писали в интерпретаторе без интерактивного режима,"
    },
    {
      "timestamp": [
        450.4,
        453.58
      ],
      "text": " то есть python hello.py,"
    },
    {
      "timestamp": [
        453.58,
        458.16
      ],
      "text": " только еще с дополнительными опциями и абсолютными путями."
    },
    {
      "timestamp": [
        458.16,
        463.82
      ],
      "text": " И в конце у нас есть сообщение, которое говорит нам о том, что"
    },
    {
      "timestamp": [
        463.82,
        466.82
      ],
      "text": " мы завершили с кодом 0, ну то есть без ошибок это обычно"
    },
    {
      "timestamp": [
        466.82,
        467.82
      ],
      "text": " значит."
    },
    {
      "timestamp": [
        467.82,
        470.18
      ],
      "text": " Давайте теперь поговорим о базовых вещах в языке"
    },
    {
      "timestamp": [
        470.18,
        471.18
      ],
      "text": " Python."
    },
    {
      "timestamp": [
        471.18,
        472.18
      ],
      "text": " Начнем с литералы."
    },
    {
      "timestamp": [
        472.18,
        474.7
      ],
      "text": " Литерал это то же самое, что константа."
    },
    {
      "timestamp": [
        474.7,
        480.0
      ],
      "text": " Например, 1, 2, 3 число это константа."
    },
    {
      "timestamp": [
        480.0,
        486.0
      ],
      "text": " Строка ABC это тоже константа."
    },
    {
      "timestamp": [
        488.5,
        489.2
      ],
      "text": " Следующая сущность — это переменные."
    },
    {
      "timestamp": [
        490.2,
        494.7
      ],
      "text": " Что такое переменные? Это сущность в коде, используемая для хранения данных, например, промежуточного результата."
    },
    {
      "timestamp": [
        495.1,
        498.2
      ],
      "text": " В языке Python переменные задаются следующим образом."
    },
    {
      "timestamp": [
        498.5,
        506.5
      ],
      "text": " Задается сначала имя переменные, пусть будет var, потом знак равенства равно и дальше выражение некоторое."
    },
    {
      "timestamp": [
        506.5,
        511.36
      ],
      "text": " Давайте мы напишем здесь 123. То есть что значит этот код?"
    },
    {
      "timestamp": [
        511.36,
        517.2
      ],
      "text": " Значит, что в переменную с именем var записать значение литерала 123."
    },
    {
      "timestamp": [
        517.2,
        528.12
      ],
      "text": " Константы, да? Также можно создать другую переменную var2 и в нее записать строку abc."
    },
    {
      "timestamp": [
        528.84,
        532.92
      ],
      "text": " Замечательно. Язык Python является динамически типизированным. Что это"
    },
    {
      "timestamp": [
        532.92,
        537.4
      ],
      "text": " значит? Это значит, что нам не нужно писать имя типа перед объявлением перемены."
    },
    {
      "timestamp": [
        537.4,
        542.24
      ],
      "text": " Это дополнительно значит, что мы в любую переменную можем положить любое"
    },
    {
      "timestamp": [
        542.24,
        546.68
      ],
      "text": " значение, то есть любой тип. Например, мы можем в переменную var3"
    },
    {
      "timestamp": [
        547.28,
        549.28
      ],
      "text": " положить сначала"
    },
    {
      "timestamp": [
        549.32,
        554.04
      ],
      "text": " 123, что является числовым типом данных, а потом туда же"
    },
    {
      "timestamp": [
        555.16,
        557.16
      ],
      "text": " положить строку"
    },
    {
      "timestamp": [
        557.16,
        559.16
      ],
      "text": " abc"
    },
    {
      "timestamp": [
        559.64,
        561.64
      ],
      "text": " Это будет валидным кодом."
    },
    {
      "timestamp": [
        562.48,
        566.0
      ],
      "text": " Интерпретатор на это не будет ругаться. Все хорошо."
    },
    {
      "timestamp": [
        566.0,
        568.0
      ],
      "text": " Что еще хотелось сразу подметить."
    },
    {
      "timestamp": [
        568.0,
        574.0
      ],
      "text": " В языке часто будете встречать конструкции с такой вот решеткой."
    },
    {
      "timestamp": [
        574.0,
        576.0
      ],
      "text": " Это называется комментарий."
    },
    {
      "timestamp": [
        576.0,
        580.5
      ],
      "text": " Видите, нам даже IDE специальным образом выделила этот кусок кода."
    },
    {
      "timestamp": [
        580.5,
        582.0
      ],
      "text": " Он стал серым."
    },
    {
      "timestamp": [
        582.0,
        583.0
      ],
      "text": " Для чего это нужно?"
    },
    {
      "timestamp": [
        583.0,
        585.64
      ],
      "text": " Это, во-первых, называется комментариям,"
    },
    {
      "timestamp": [
        585.64,
        591.76
      ],
      "text": " во-вторых, это нужно, чтобы какие-то куски кода или каких-то комментариев ваших,"
    },
    {
      "timestamp": [
        591.76,
        597.8
      ],
      "text": " возможно словесных пояснений, интерпретатор не обрабатывал как код, а просто пропускал."
    },
    {
      "timestamp": [
        597.8,
        609.2
      ],
      "text": " Также можно комментировать сразу несколько строк и раскомментировать обратно. Например, на macOS это комбинация command slash."
    },
    {
      "timestamp": [
        609.2,
        613.68
      ],
      "text": " Комментирует либо раскомментирует обратно. Давайте теперь поговорим о том,"
    },
    {
      "timestamp": [
        613.68,
        619.56
      ],
      "text": " как вводить данные пользователя с клавиатуры. Для этого есть функция input."
    },
    {
      "timestamp": [
        619.56,
        631.2
      ],
      "text": " Давайте рассмотрим следующий фрагмент кода. Мы в переменную var3 записываем значение того, что нам вернет функция input,"
    },
    {
      "timestamp": [
        631.2,
        635.6
      ],
      "text": " а она нам вернет то, что пользователь ведет с командной строки."
    },
    {
      "timestamp": [
        635.6,
        641.2
      ],
      "text": " При этом в командной строке пользователя будет ожидать вот это сообщение,"
    },
    {
      "timestamp": [
        641.2,
        644.0
      ],
      "text": " Enter your age, и двоеточие."
    },
    {
      "timestamp": [
        644.0,
        647.76
      ],
      "text": " Давайте запустим этот фрагмент кода и посмотрим, что у нас получится."
    },
    {
      "timestamp": [
        649.04,
        656.56
      ],
      "text": " Как видим, программа вывела приветственное сообщение. Enter your age. Давайте передадим ей туда 1, 2, 3. Нажмем Enter."
    },
    {
      "timestamp": [
        657.8,
        659.8
      ],
      "text": " И видим, что программа завершилась."
    },
    {
      "timestamp": [
        659.8,
        666.18
      ],
      "text": " Ну, потому что мы с этими данными ничего не делали, записали просто в переменную и дальше вышли из программы"
    },
    {
      "timestamp": [
        666.6,
        671.9
      ],
      "text": " давайте чуть проверим, что на самом деле то, что мы ввели, оно и выведется"
    },
    {
      "timestamp": [
        673.74,
        677.54
      ],
      "text": " добавив вот такой кусок кода, то есть мы выведем"
    },
    {
      "timestamp": [
        678.18,
        682.88
      ],
      "text": " print, hello, давайте выведем еще какую-нибудь переменную, наш var"
    },
    {
      "timestamp": [
        684.78,
        688.0
      ],
      "text": " дополнительно и переменную myvr3."
    },
    {
      "timestamp": [
        688.0,
        695.76
      ],
      "text": " По идее у нас должно вывесться hello, потом 123 и то что мы введем с"
    },
    {
      "timestamp": [
        695.76,
        706.8
      ],
      "text": " командной строки. Давайте пробовать. Давайте в этот раз что-нибудь введем не 1.0.3, а 4.5.6."
    },
    {
      "timestamp": [
        706.8,
        711.84
      ],
      "text": " Как мы видим, как и ожидалось, ввелось hello, потом 1.2.3,"
    },
    {
      "timestamp": [
        711.84,
        715.36
      ],
      "text": " а потом то, что мы ввели из командной строки, то"
    },
    {
      "timestamp": [
        715.36,
        716.36
      ],
      "text": " есть 4.5.6."
    },
    {
      "timestamp": [
        716.36,
        718.0
      ],
      "text": " Ну и дальше программа завершилась."
    },
    {
      "timestamp": [
        718.0,
        721.36
      ],
      "text": " И в заключение давайте еще расскажу про Python-консоль"
    },
    {
      "timestamp": [
        721.36,
        722.36
      ],
      "text": " в IDE.pharm."
    },
    {
      "timestamp": [
        722.36,
        728.96
      ],
      "text": " То есть, то, что мы запускали в терминале, можно запустить и в самой IDE."
    },
    {
      "timestamp": [
        728.96,
        732.84
      ],
      "text": " Здесь по правой части есть вот такая иконка Python консоль."
    },
    {
      "timestamp": [
        732.84,
        741.92
      ],
      "text": " Мы просто ее нажимаем, запускается некий процесс и на самом деле запускается Python интерпретатор в интерактивном режиме."
    },
    {
      "timestamp": [
        741.92,
        747.72
      ],
      "text": " Здесь мы также то же самое все можем делать, что делали при обычном запуске интерпретатора."
    },
    {
      "timestamp": [
        747.72,
        756.8
      ],
      "text": " Ну, например, давайте опять hello world, напишем print hello world, enter. Вот, программа вывела hello world."
    },
    {
      "timestamp": [
        756.8,
        768.36
      ],
      "text": " То же самое, на самом деле, давайте с input еще раз попробуем. Давайте в какую-нибудь переменную var, запишем значение input, отметил, что можно приветственное"
    },
    {
      "timestamp": [
        768.36,
        773.72
      ],
      "text": " сообщение вообще не писать, а ставить просто круглые скобочки, тогда просто от вас программа будет"
    },
    {
      "timestamp": [
        773.72,
        792.54
      ],
      "text": " ожидать сразу ввод без какого-то приветствия. Ну давайте здесь abc123, передадим, enter, 3. Передадим. Enter. Отлично. И посмотрим, что у нас переменный var. То есть, чтобы посмотреть, что в переменной var, можно написать ее имя"
    },
    {
      "timestamp": [
        792.96,
        801.0
      ],
      "text": " и нажать Enter. Вам интерпретатор сразу выведет ее значение. То есть, не обязательно писать print в интерактивном режиме в этом случае."
    },
    {
      "timestamp": [
        801.0,
        803.0
      ],
      "text": " То есть, будет примерно то же самое."
    },
    {
      "timestamp": [
        803.28,
        806.64
      ],
      "text": " На этом уроке мы познакомились с интерпретатором Python,"
    },
    {
      "timestamp": [
        806.64,
        809.2
      ],
      "text": " узнали как работать с ним в интерактивном режиме,"
    },
    {
      "timestamp": [
        809.2,
        812.44
      ],
      "text": " как запускать код из файла с его помощью, познакомились"
    },
    {
      "timestamp": [
        812.44,
        816.2
      ],
      "text": " с IDE по HR, узнали как базово разрабатывать код в ней,"
    },
    {
      "timestamp": [
        816.2,
        819.44
      ],
      "text": " написали свою первую программу Hello World, а также разобрались"
    },
    {
      "timestamp": [
        819.44,
        822.96
      ],
      "text": " с такими понятиями как литерал, переменные, научились"
    },
    {
      "timestamp": [
        822.96,
        826.56
      ],
      "text": " выводить данные в консоль, а также считывать пользовательские данные"
    },
    {
      "timestamp": [
        826.56,
        827.92
      ],
      "text": " со стандартного ввода."
    }
  ]
}